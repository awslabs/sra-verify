AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to deploy SRAVerify CodeBuild project'

Parameters:

  AuditAccountID:
    Type: String
    Description: The AWS account ID for the audit account. If you have multiple audit accounts, use a comma separated list.

  LogArchiveAccountID:
    Type: String
    Description: The AWS account ID for the log archive account. If you have multiple log archive accounts, use a comma separated list.

  ParallelAccounts:
    Type: Number
    Description: Number of accounts to scan in parallel
    Default: 5
    MinValue: 1
    MaxValue: 20
  
  IncludeRegions:
    Type: String
    Description: Comma-separated list of AWS regions to include in the scan
    Default: 'us-east-1,us-east-2,us-west-2'

Resources:
  # This is the role that Codebuild uses
  SRAVerifyCodeBuildServiceRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Star resource required for actions
          - id: W28
            reason: Explicit name used for role for easy identification. 
    Type: AWS::IAM::Role
    Properties:
      RoleName: SRAVerifyCodeBuildServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceArn: !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/SRAVerify-Security-Assessment'
      Policies:
        - PolicyName: CodeBuildServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub '${bucketSRAVerifyFindings.Arn}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub '${bucketSRAVerifyFindings.Arn}'
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Sub 'arn:${AWS::Partition}:iam::*:role/SRAMemberRole'
              - Effect: Allow
                Action:
                  - organizations:ListAccounts
                  - organizations:DescribeOrganization
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeRegions
                Resource: '*'

  # S3 bucket for the SRA Verify findings. 
  # Amazon Q suggests S3 bucket encryption, S3 Object Lock, and S3 Bucket replication. These features are not required for SRA Verify.
  # amazonq-ignore-next-line
  bucketSRAVerifyFindings:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: No bucket logging needed.
          - id: W41
            reason: Amazon S3 now applies server-side encryption with Amazon S3 managed keys (SSE-S3) as the base level of encryption for every bucket in Amazon S3.
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain 
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  bucketPolicySRAVerifyFindings:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref bucketSRAVerifyFindings
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowSSLRequestsOnly
            Principal: '*'
            Action: 's3:*'
            Effect: Deny
            Resource:
              - !Sub '${bucketSRAVerifyFindings.Arn}'
              - !Sub '${bucketSRAVerifyFindings.Arn}/*'
            Condition:
              Bool:
                aws:SecureTransport: false

  # CodeBuild Project
  SRAVerifyCodeBuildProject:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W32
            reason: No KMS keys are specified. This project uses the default AWS managed keys.
    Type: AWS::CodeBuild::Project
    Properties:
      Name: SRAVerify-Security-Assessment
      Description: 'CodeBuild project for running SRAVerify security assessment'
      ServiceRole: !GetAtt  SRAVerifyCodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref 'AWS::Region'
          - Name: PARALLEL_ACCOUNTS
            Value: !Ref ParallelAccounts
          - Name: INCLUDE_REGIONS
            Value: !Ref IncludeRegions
          - Name: S3_SRA_RESULTS_BUCKET
            Value: !Ref bucketPolicySRAVerifyFindings
          - Name: AWS_AUDIT_ACCOUNTS
            Value: !Ref AuditAccountID
          - Name: AWS_LOG_ARCHIVE_ACCOUNTS
            Value: !Ref LogArchiveAccountID
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.11
              commands:
                - echo "Setting up SRAVerify environment..."
                - pip3 install --upgrade pip
                - pip3 install boto3 click pandas
                - git clone https://github.com/awslabs/sra-verify.git
                - pip install ./sra-verify
          
            build:
              commands:
                - |
                  # Create directories for results
                  mkdir -p /tmp/sraverify-results
                  timestamp=$(date +%Y%m%d_%H%M%S)
                  export timestamp
                  
                  # Get list of all accounts using management role
                  account_list=$(aws organizations list-accounts --query 'Accounts[?Status==`ACTIVE`].Id' --output text)
                  echo "Found accounts: $account_list"
                  export account_list
          
                  # Get CodeBuild/Management account
                  management_account=$(aws organizations describe-organization --query 'Organization.MasterAccountId' --output text)
                  echo "Assuming role running in management account: $management_account"
          
                  # Run organization-level checks from management account
                  echo "Running organization-level checks..."
                  cd /tmp/sraverify-results
                  sraverify \
                      --role arn:aws:iam::${management_account}:role/SRAMemberRole \
                      --account-type management \
                      --regions ${INCLUDE_REGIONS} \
                      --audit-account ${AWS_AUDIT_ACCOUNTS} \
                      --log-archive-account ${AWS_LOG_ARCHIVE_ACCOUNTS}
          
                  # Run audit checks from audit account
                  if [ "$AWS_AUDIT_ACCOUNTS" != "" ]; then
                      echo "Running audit checks..."
                      for account in $(echo $AWS_AUDIT_ACCOUNTS | tr ',' ' '); do
                          echo "Running audit checks for account: $account"
                          sraverify \
                              --role arn:aws:iam::${account}:role/SRAMemberRole \
                              --account-type audit \
                              --regions ${INCLUDE_REGIONS} \
                              --audit-account ${AWS_AUDIT_ACCOUNTS} \
                              --log-archive-account ${AWS_LOG_ARCHIVE_ACCOUNTS}
                      done
                  fi
          
                  # Run log archive checks from log account
                  if [ "$AWS_LOG_ARCHIVE_ACCOUNTS" != "" ]; then
                      echo "Running log archive checks..."
                      for account in $(echo $AWS_LOG_ARCHIVE_ACCOUNTS | tr ',' ' '); do
                          echo "Running log archive checks for account: $account"
                          sraverify \
                              --role arn:aws:iam::${account}:role/SRAMemberRole \
                              --account-type log-archive \
                              --regions ${INCLUDE_REGIONS} \
                              --audit-account ${AWS_AUDIT_ACCOUNTS} \
                              --log-archive-account ${AWS_LOG_ARCHIVE_ACCOUNTS}
                      done
                  fi
          
                  # Create scan_account function
                  scan_account() {
                      local accountId=$1
                      local timestamp=$2
                      echo "Starting scan for account $accountId"
                      
                      # Create temporary directory for this account's scan
                      mkdir -p "/tmp/sraverify-results/${accountId}"
                      cd "/tmp/sraverify-results/${accountId}"
                      
                      # Don't assume role, just use the role 
                      sraverify \
                          --role arn:aws:iam::${accountId}:role/SRAMemberRole \
                          --account-type application \
                          --regions ${INCLUDE_REGIONS} \
                          --audit-account ${AWS_AUDIT_ACCOUNTS} \
                          --log-archive-account ${AWS_LOG_ARCHIVE_ACCOUNTS}
                  }
                  export -f scan_account
                  
                  # Run account-level scans in parallel
                  echo "Running account-level checks in parallel..."
                  echo $account_list | tr ' ' '\n' | parallel -j ${PARALLEL_ACCOUNTS:-5} scan_account {} $timestamp
          
                  echo "Consolidating CSV files..."
                  mkdir -p /tmp/sraverify-consolidated/csv
                  mkdir -p /tmp/sraverify-consolidated/raw
                  
                  # Copy all raw CSV files including organization findings
                  find /tmp/sraverify-results -name "sraverify*.csv" -type f -exec cp {} /tmp/sraverify-consolidated/raw/ \;
                  
                  # Run Python consolidation script
                  python3 - <<'PYTHON_EOF'
                  import pandas as pd
                  import glob
                  import os
                  import sys
                  
                  try:
                      # Find all CSV files including organization findings
                      csv_files = glob.glob('/tmp/sraverify-results/**/sraverify*.csv', recursive=True)
                      
                      if csv_files:
                          # Read and combine all CSVs
                          all_dfs = []
                          for file in csv_files:
                              try:
                                  df = pd.read_csv(file)
                                  all_dfs.append(df)
                              except Exception as e:
                                  print(f"Error reading file {file}: {str(e)}")
                                  continue
                          
                          if all_dfs:
                              # Save consolidated findings
                              combined_df = pd.concat(all_dfs, ignore_index=True)
                              output_file = f'/tmp/sraverify-consolidated/csv/sraverify-consolidated-{os.environ["timestamp"]}.csv'
                              combined_df.to_csv(output_file, index=False)
                      
                  except Exception as e:
                      print(f"Error in Python script: {str(e)}")
                      import traceback
                      traceback.print_exc()
                      sys.exit(1)
                  PYTHON_EOF
          
            post_build:
              commands:
                - echo "Uploading SRAVerify results to S3..."
                - aws s3 cp /tmp/sraverify-consolidated/csv/ s3://$S3_SRA_RESULTS_BUCKET/sraverify/reports/consolidated/ --recursive
                - aws s3 cp /tmp/sraverify-consolidated/raw/ s3://$S3_SRA_RESULTS_BUCKET/sraverify/reports/raw/ --recursive
          
          artifacts:
            files:
              - '**/*.csv'
            base-directory: '/tmp/sraverify-consolidated'
          
          cache:
            paths:
              - '/root/.cache/pip/**/*'

  # Custom resource to start the CodeBuild job after the CloudFormation template is deployed.
  CodeBuildStartBuild:
    Type: Custom::CodeBuildStartBuild
    Properties:
      ServiceToken: !GetAtt CodeBuildStartBuildLambda.Arn
      ProjectName: !Ref SRAVerifyCodeBuildProject

  CodeBuildStartBuildLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                aws:SourceAccount: !Sub ${AWS::AccountId}
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StartBuildInline
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'codebuild:StartBuild'
                Resource: !GetAtt SRAVerifyCodeBuildProject.Arn

  CodeBuildStartBuildLogsGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: CloudWatch Logs protects data at rest using encryption. All log groups are encrypted. By default, the CloudWatch Logs service manages the server-side encryption keys.
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CodeBuildStartBuildLambda}'
      RetentionInDays: 7

  CodeBuildStartBuildLambda:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: The CodeBuildStartBuildLambdaRole gives Lambda access to write CloudWatch logs.
          - id: W89
            reason: Lambda is not deployed inside of a VPC. The Lambda function is used to start the CodeBuild job as a custom CloudFormation resource.
          - id: W92
            reason: Reserved concurrent executions is not set.
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !Sub ${CodeBuildStartBuildLambdaRole.Arn}
      Timeout: 120
      Runtime: python3.13
      Code:
        ZipFile: |
          import os
          import boto3
          from botocore.exceptions import ClientError
          import cfnresponse
                    
          def startBuild(event, context):
            responseData = {}
            cb = boto3.client('codebuild')
            try:
              print("Starting build...")
              response = cb.start_build(projectName=event['ResourceProperties']['ProjectName'])
              responseData['buildID'] = response['build']['id']
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            except ClientError as e:
              print("Failed to start build")
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, e.response)

          def no_op(event, context):
            responseData = {}
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

          def lambda_handler(event,context):
            print(event)
            if event['RequestType'] == 'Create':
              startBuild(event, context)
            else:
              no_op(event,context)